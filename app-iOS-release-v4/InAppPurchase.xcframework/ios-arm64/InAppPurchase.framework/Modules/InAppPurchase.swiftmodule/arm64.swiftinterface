// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InAppPurchase
import Combine
import CommonCrypto
import Foundation
import Foundation/*.Bundle*/
@_exported import InAppPurchase
import StoreKit
import Swift
import UIKit
import _Concurrency
import os.log
import os
public func logD(_ object: Any?, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
public func logI(_ object: Any?, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
public func logW(_ object: Any?, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
public func logE(_ object: Any?, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
@_hasMissingDesignatedInitializers open class ASN1Decoder {
  @objc deinit
}
@inlinable @inline(__always) internal func isHighTag(_ number: Swift.UInt8) -> Swift.Bool {
	return number == 0x1f
}
@inlinable @inline(__always) internal func lastTagNumber(_ byte: Swift.UInt8) -> Swift.Bool {
	return (byte & 0x80) == 0x1f
}
@inlinable @inline(__always) internal func lengthIsShortForm(_ byte: Swift.UInt8) -> Swift.Bool {
	return (byte & 0x80) == 0
}
@inlinable @inline(__always) internal func longFormLength(_ byte: Swift.UInt8) -> Swift.UInt8 {
	return (byte & 0x7f)
}
@inlinable @inline(__always) internal func highBits(_ field: Swift.UInt8, _ cnt: Swift.UInt8) -> Swift.UInt8 {
	return field >> (UInt8(MemoryLayout.size(ofValue: field))*8 - cnt)
}
@inlinable @inline(__always) internal func tlvConstructed(tag: Swift.UInt8) -> Swift.Bool {
	return tag & 0x20 != 0
}
public struct Product {
  public var title: Swift.String?
  public var description: Swift.String?
  public var price: Swift.String?
  public var identifier: Swift.String?
  public var subscription: Swift.String?
  public var debugDescription: Swift.String {
    get
  }
}
extension StoreKit.SKProduct {
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
}
public enum InAppStatus {
  case retrieving
  case retrieved
  case purchasing
  case purchased
  case restoring
  case restored
  case validating
  case validated
  case expired
  case unknown
  public static func == (a: InAppPurchase.InAppStatus, b: InAppPurchase.InAppStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum InAppError : Swift.Error {
  case retrieving
  case purchasing
  case restoring
  case validating
  public static func == (a: InAppPurchase.InAppError, b: InAppPurchase.InAppError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class InAppPurchaseManager : Combine.ObservableObject {
  public static let shared: InAppPurchase.InAppPurchaseManager
  public var canPurchase: Swift.Bool {
    get
  }
  @Combine.Published @_projectedValueProperty($products) public var products: Swift.Result<[InAppPurchase.Product], InAppPurchase.InAppError>? {
    get
    set
    _modify
  }
  public var $products: Combine.Published<Swift.Result<[InAppPurchase.Product], InAppPurchase.InAppError>?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func getProducts(for identifiers: [Swift.String])
  @Combine.Published @_projectedValueProperty($status) public var status: Swift.Result<InAppPurchase.InAppStatus, InAppPurchase.InAppError>? {
    get
    set
    _modify
  }
  public var $status: Combine.Published<Swift.Result<InAppPurchase.InAppStatus, InAppPurchase.InAppError>?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func purchase(product: InAppPurchase.Product? = nil)
  public func validateReceipt(subscription: Swift.String)
  public func refreshReceipt(subscription: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension InAppPurchase.InAppStatus : Swift.Equatable {}
extension InAppPurchase.InAppStatus : Swift.Hashable {}
extension InAppPurchase.InAppError : Swift.Equatable {}
extension InAppPurchase.InAppError : Swift.Hashable {}
